
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    # Optional upstream block if you prefer a named upstream
    upstream django_server {
        # "django" must be resolvableâ€”e.g., a Docker service name in the same Docker network
        server django:8000;
    }

    server {
        listen 80;
        server_name localhost;

        # Serve static files directly
        location /static/ {
            alias /static/;    # Change this if your static files are in a different path
            # try_files $uri $uri/ =404; # Optionally add stricter checks
        }

        # Serve media files directly
        location /media/ {
            alias /media/;     # Change if your media files are in a different path
            # try_files $uri $uri/ =404;
        }

        # Proxy everything else to Django
        location / {
            # Use the upstream name, or just proxy_pass http://django:8000/ if you prefer
            proxy_pass http://django_server;

            # Preserve client info
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    server {
        listen 80;
        server_name localhost;

        location /static/ {
            alias /static/;
        }

        location /media/ {
            alias /media/;
        }

        location / {
            proxy_pass http://django:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
